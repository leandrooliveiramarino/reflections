What happens when you initialize a repository? Why do you need to do it?

When I initialize a repository, Git creates it's directory. When we do it, we can use the folder as a new repository of files


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area responsability is to hold the files that you pretend to commit, so in this way you can put files there and commit them separately. It helps handling the files you want to commit and keep things organized.


How can you use the staging area to make sure you have one commit per logical change?

I could use the commands git diff to guarantee that I have only one commit at the current time


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When we want to create another feature or treat a bug for example. In this way, we can make changes without get worried about crashing the entire project.


How do the diagrams help you visualize the branch structure?

Through diagrams, it's possible to see which commit belongs to it's branches, so I can better visualize the tree and see the commits a git log command will generate.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It will result in files including the merged content from the commits. We represent like this because another commit is created with the name of the branch you've merged with.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Sometimes it's impossible for Git to know how it's going to merge a file, so it gives the warning message saying that we have to open the file and do it manually. Otherwise, when Git can do it automatically, it does it displaying a success message.
